# RightTool – Next.js MVP

A lean, production‑ready starter that powers: **search car → pick job → exact tool checklist → mark owned → missing summary**. Uses Next.js (App Router), Tailwind, Prisma (SQLite for local), and API routes you can later swap to Supabase Postgres.

---

## 📦 Project Structure (files below)
```
righttool/
├─ .env.example
├─ package.json
├─ next.config.mjs
├─ postcss.config.js
├─ tailwind.config.ts
├─ tsconfig.json
├─ prisma/
│  ├─ schema.prisma
│  └─ seed.ts
├─ src/
│  ├─ app/
│  │  ├─ layout.tsx
│  │  ├─ globals.css
│  │  ├─ page.tsx
│  │  └─ api/
│  │     ├─ vehicles/route.ts
│  │     ├─ jobs/route.ts
│  │     └─ tools/route.ts
│  ├─ components/
│  │  └─ ToolList.tsx
│  └─ lib/
│     ├─ db.ts
│     ├─ types.ts
│     └─ demoSeed.ts
```

---

## 🚀 Setup

```bash
# 1) Create project folder and paste files
# 2) Install deps
pnpm i # or npm i / yarn

# 3) env + DB
cp .env.example .env
# For SQLite local dev, the default is fine.

# 4) Prisma init + seed
pnpm prisma migrate dev --name init
pnpm prisma db seed

# 5) Dev
pnpm dev
```

---

## 🔐 Env (.env.example)
```
# SQLite for local dev
DATABASE_URL="file:./dev.db"
# For future: NEXT_PUBLIC_SUPABASE_URL=...
# NEXT_PUBLIC_SUPABASE_ANON_KEY=...
```

---

## package.json
```json
{
  "name": "righttool",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "dev": "next dev",
    "build": "next build",
    "start": "next start",
    "lint": "next lint",
    "prisma": "prisma",
    "prisma:studio": "prisma studio",
    "seed": "tsx prisma/seed.ts"
  },
  "dependencies": {
    "@prisma/client": "^5.19.0",
    "clsx": "^2.1.1",
    "lucide-react": "^0.452.0",
    "next": "^14.2.7",
    "react": "^18.3.1",
    "react-dom": "^18.3.1",
    "tailwind-merge": "^2.5.2",
    "tailwindcss": "^3.4.10"
  },
  "devDependencies": {
    "@types/node": "^20.14.10",
    "@types/react": "^18.3.3",
    "@types/react-dom": "^18.3.0",
    "autoprefixer": "^10.4.19",
    "eslint": "^8.57.0",
    "eslint-config-next": "^14.2.7",
    "postcss": "^8.4.39",
    "prisma": "^5.19.0",
    "tsx": "^4.17.0",
    "typescript": "^5.5.4"
  }
}
```

---

## next.config.mjs
```js
/** @type {import('next').NextConfig} */
const nextConfig = {
  reactStrictMode: true,
  experimental: { serverActions: { allowedOrigins: ["*"] } }
};
export default nextConfig;
```

---

## postcss.config.js
```js
module.exports = {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
};
```

---

## tailwind.config.ts
```ts
import type { Config } from 'tailwindcss'

export default {
  content: [
    './src/app/**/*.{ts,tsx}',
    './src/components/**/*.{ts,tsx}',
  ],
  theme: {
    extend: {},
  },
  plugins: [],
} satisfies Config
```

---

## tsconfig.json
```json
{
  "compilerOptions": {
    "target": "ES2022",
    "lib": ["dom", "dom.iterable", "es2022"],
    "allowJs": false,
    "skipLibCheck": true,
    "strict": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "bundler",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true,
    "forceConsistentCasingInFileNames": true,
    "baseUrl": ".",
    "paths": {
      "@/components/*": ["src/components/*"],
      "@/lib/*": ["src/lib/*"]
    }
  },
  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx"],
  "exclude": ["node_modules"]
}
```

---

## prisma/schema.prisma
```prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Vehicle {
  id       String  @id @default(cuid())
  year     Int
  make     String
  model    String
  engine   String
  trim     String?  
  requirements Requirement[]
}

model Job {
  id       String  @id @default(cuid())
  slug     String  @unique
  title    String
  category String
  requirements Requirement[]
}

model Tool {
  id       String  @id @default(cuid())
  name     String
  size     String?
  drive    String?
  notes    String?
  requirements Requirement[]
}

model Requirement {
  id        String  @id @default(cuid())
  vehicle   Vehicle @relation(fields: [vehicleId], references: [id])
  vehicleId String
  job       Job     @relation(fields: [jobId], references: [id])
  jobId     String
  tool      Tool    @relation(fields: [toolId], references: [id])
  toolId    String
  qty       Int     @default(1)
  notes     String?
}
```

---

## prisma/seed.ts
```ts
import { PrismaClient } from '@prisma/client'
const prisma = new PrismaClient()

async function main() {
  // Vehicles
  const [acc15, civ16, f15018, cor18, wrn17] = await Promise.all([
    prisma.vehicle.create({ data: { year: 2015, make: 'Honda', model: 'Accord', engine: '2.4L I4' } }),
    prisma.vehicle.create({ data: { year: 2016, make: 'Honda', model: 'Civic', engine: '2.0L I4' } }),
    prisma.vehicle.create({ data: { year: 2018, make: 'Ford', model: 'F-150', engine: '5.0L V8' } }),
    prisma.vehicle.create({ data: { year: 2018, make: 'Toyota', model: 'Corolla', engine: '1.8L I4' } }),
    prisma.vehicle.create({ data: { year: 2017, make: 'Jeep', model: 'Wrangler', engine: '3.6L V6' } }),
  ])

  // Jobs
  const [brakeFront, oilChange, battery, spark] = await Promise.all([
    prisma.job.create({ data: { slug: 'front-brake-pads', title: 'Front Brake Pads', category: 'Brakes' } }),
    prisma.job.create({ data: { slug: 'engine-oil-change', title: 'Engine Oil & Filter', category: 'Maintenance' } }),
    prisma.job.create({ data: { slug: 'battery-replacement', title: 'Battery Replacement', category: 'Electrical' } }),
    prisma.job.create({ data: { slug: 'spark-plugs', title: 'Spark Plugs', category: 'Ignition' } }),
  ])

  // Tools (core demo set)
  const toolData = [
    { name: 'Hydraulic Floor Jack', notes: '2-ton+ rated' },
    { name: 'Jack Stands (x2)', notes: 'ANSI/ASME rated' },
    { name: 'Socket', size: '19mm', drive: '1/2"', notes: 'Lug nuts' },
    { name: 'Ratchet', drive: '3/8"' },
    { name: 'Extension', notes: '3"' },
    { name: 'Socket', size: '12mm', drive: '3/8"', notes: 'Caliper slide bolts' },
    { name: 'Socket', size: '17mm', drive: '1/2"', notes: 'Caliper bracket' },
    { name: 'C-Clamp / Piston Compressor' },
    { name: 'Torque Wrench', drive: '1/2"', notes: '20–100 ft‑lb' },
    { name: 'Brake Cleaner', notes: 'Consumable' },
    { name: 'Nitrile Gloves' },
    { name: 'Oil Drain Pan' },
    { name: 'Oil Filter Wrench', notes: 'Band or cap type' },
    { name: 'Socket', size: '14mm', drive: '3/8"', notes: 'Drain plug (Honda)' },
    { name: 'Socket', size: '10mm', drive: '1/4"', notes: 'Battery terminals' },
    { name: 'Spark Plug Socket', size: '16mm', drive: '3/8"', notes: 'Magnetic/with rubber insert' },
    { name: 'Feeler Gauge', notes: 'Gap check if applicable' },
    { name: 'Dielectric Grease' },
  ]
  const tools = await Promise.all(toolData.map((t) => prisma.tool.create({ data: t })))

  const byName = (name: string, size?: string) => tools.find(t => t.name === name && (!size || t.size === size))!

  // Requirements (demo, not authoritative specs)
  const reqs = [
    // 2015 Accord – Front brake pads
    { vehicleId: acc15.id, jobId: brakeFront.id, toolId: byName('Hydraulic Floor Jack').id },
    { vehicleId: acc15.id, jobId: brakeFront.id, toolId: byName('Jack Stands (x2)').id },
    { vehicleId: acc15.id, jobId: brakeFront.id, toolId: byName('Socket', '19mm').id },
    { vehicleId: acc15.id, jobId: brakeFront.id, toolId: byName('Ratchet').id },
    { vehicleId: acc15.id, jobId: brakeFront.id, toolId: byName('Extension').id, notes: '3"' },
    { vehicleId: acc15.id, jobId: brakeFront.id, toolId: byName('Socket', '12mm').id, notes: 'Caliper guide pins' },
    { vehicleId: acc15.id, jobId: brakeFront.id, toolId: byName('Socket', '17mm').id, notes: 'Bracket bolts' },
    { vehicleId: acc15.id, jobId: brakeFront.id, toolId: byName('C-Clamp / Piston Compressor').id },
    { vehicleId: acc15.id, jobId: brakeFront.id, toolId: byName('Torque Wrench').id, notes: 'Lugs ~80 ft‑lb (check manual)' },
    { vehicleId: acc15.id, jobId: brakeFront.id, toolId: byName('Brake Cleaner').id },
    { vehicleId: acc15.id, jobId: brakeFront.id, toolId: byName('Nitrile Gloves').id },

    // 2016 Civic – Oil change
    { vehicleId: civ16.id, jobId: oilChange.id, toolId: byName('Oil Drain Pan').id },
    { vehicleId: civ16.id, jobId: oilChange.id, toolId: byName('Socket', '14mm').id },
    { vehicleId: civ16.id, jobId: oilChange.id, toolId: byName('Oil Filter Wrench').id },
    { vehicleId: civ16.id, jobId: oilChange.id, toolId: byName('Nitrile Gloves').id },

    // 2018 F-150 – Battery
    { vehicleId: f15018.id, jobId: battery.id, toolId: byName('Socket', '10mm').id },
    { vehicleId: f15018.id, jobId: battery.id, toolId: byName('Nitrile Gloves').id },

    // 2017 Wrangler – Spark plugs
    { vehicleId: wrn17.id, jobId: spark.id, toolId: byName('Spark Plug Socket', '16mm').id },
    { vehicleId: wrn17.id, jobId: spark.id, toolId: byName('Ratchet').id },
    { vehicleId: wrn17.id, jobId: spark.id, toolId: byName('Extension').id, notes: '3"' },
    { vehicleId: wrn17.id, jobId: spark.id, toolId: byName('Feeler Gauge').id },
    { vehicleId: wrn17.id, jobId: spark.id, toolId: byName('Dielectric Grease').id },
  ]

  await prisma.$transaction(reqs.map((r) => prisma.requirement.create({ data: r })))
}

main()
  .then(async () => { await prisma.$disconnect() })
  .catch(async (e) => { console.error(e); await prisma.$disconnect(); process.exit(1) })
```

---

## src/lib/types.ts
```ts
export type VehicleDTO = { id: string; year: number; make: string; model: string; engine: string; trim?: string | null }
export type JobDTO = { id: string; slug: string; title: string; category: string }
export type ToolDTO = { id: string; name: string; size?: string | null; drive?: string | null; notes?: string | null }
export type RequirementDTO = { id: string; vehicleId: string; jobId: string; qty: number; notes?: string | null; tool: ToolDTO }
```

---

## src/lib/db.ts
```ts
import { PrismaClient } from '@prisma/client'

const globalForPrisma = globalThis as unknown as { prisma?: PrismaClient }
export const prisma = globalForPrisma.prisma ?? new PrismaClient()
if (process.env.NODE_ENV !== 'production') globalForPrisma.prisma = prisma
```

---

## src/app/globals.css
```css
@tailwind base;
@tailwind components;
@tailwind utilities;

:root { color-scheme: light; }

body { @apply bg-slate-50 text-slate-900; }
.card { @apply bg-white rounded-2xl shadow p-5; }
.input { @apply w-full border rounded-xl px-3 py-2 outline-none; }
.select { @apply w-full border rounded-xl px-3 py-2; }
.row { @apply flex items-center gap-2; }
```

---

## src/app/layout.tsx
```tsx
import './globals.css'
import { ReactNode } from 'react'

export const metadata = {
  title: 'RightTool',
  description: 'Vehicle-specific tool lists for DIY auto repair',
}

export default function RootLayout({ children }: { children: ReactNode }) {
  return (
    <html lang="en">
      <body>
        <div className="max-w-5xl mx-auto p-6">
          <header className="row gap-3 mb-4">
            <svg width="28" height="28" viewBox="0 0 24 24" fill="none" className="text-blue-600">
              <path d="M4 7h16M4 12h16M4 17h10" stroke="currentColor" strokeWidth="2" strokeLinecap="round"/>
            </svg>
            <h1 className="text-2xl sm:text-3xl font-semibold">RightTool</h1>
          </header>
          {children}
        </div>
      </body>
    </html>
  )
}
```

---

## src/app/api/vehicles/route.ts
```ts
import { NextResponse } from 'next/server'
import { prisma } from '@/lib/db'

export async function GET() {
  const vehicles = await prisma.vehicle.findMany({ orderBy: [{ make: 'asc' }, { model: 'asc' }, { year: 'desc' }] })
  return NextResponse.json(vehicles)
}
```

---

## src/app/api/jobs/route.ts
```ts
import { NextResponse } from 'next/server'
import { prisma } from '@/lib/db'

export async function GET() {
  const jobs = await prisma.job.findMany({ orderBy: [{ category: 'asc' }, { title: 'asc' }] })
  return NextResponse.json(jobs)
}
```

---

## src/app/api/tools/route.ts
```ts
import { NextRequest, NextResponse } from 'next/server'
import { prisma } from '@/lib/db'

// GET /api/tools?vehicleId=...&jobId=...
export async function GET(req: NextRequest) {
  const { searchParams } = new URL(req.url)
  const vehicleId = searchParams.get('vehicleId')
  const jobId = searchParams.get('jobId')
  if (!vehicleId || !jobId) return NextResponse.json({ error: 'vehicleId and jobId are required' }, { status: 400 })

  const reqs = await prisma.requirement.findMany({
    where: { vehicleId, jobId },
    include: { tool: true },
    orderBy: { id: 'asc' },
  })

  return NextResponse.json(reqs)
}
```

---

## src/components/ToolList.tsx
```tsx
'use client'
import { useEffect, useMemo, useState } from 'react'
import { CheckCircle2, Hammer, Search, Settings2, ShoppingCart, ChevronRight } from 'lucide-react'
import type { VehicleDTO, JobDTO, RequirementDTO } from '@/lib/types'

export default function ToolList() {
  const [vehicles, setVehicles] = useState<VehicleDTO[]>([])
  const [jobs, setJobs] = useState<JobDTO[]>([])
  const [vehicleId, setVehicleId] = useState<string>('')
  const [jobId, setJobId] = useState<string>('')
  const [query, setQuery] = useState('')
  const [reqs, setReqs] = useState<RequirementDTO[]>([])
  const [owned, setOwned] = useState<Record<string, boolean>>(() => {
    if (typeof window === 'undefined') return {}
    try { return JSON.parse(localStorage.getItem('ownedTools')||'{}') } catch { return {} }
  })

  useEffect(() => { fetch('/api/vehicles').then(r=>r.json()).then(setVehicles) }, [])
  useEffect(() => { fetch('/api/jobs').then(r=>r.json()).then(setJobs) }, [])
  useEffect(() => { if (vehicleId && jobId) fetch(`/api/tools?vehicleId=${vehicleId}&jobId=${jobId}`).then(r=>r.json()).then(setReqs) }, [vehicleId, jobId])
  useEffect(() => { localStorage.setItem('ownedTools', JSON.stringify(owned)) }, [owned])

  const filtered = useMemo(() => {
    const q = query.toLowerCase()
    return vehicles.filter(v => `${v.year} ${v.make} ${v.model} ${v.engine}`.toLowerCase().includes(q))
  }, [vehicles, query])

  const missing = reqs.filter(r => !owned[r.tool.id])

  // Preselect first entries when loaded
  useEffect(() => { if (!vehicleId && vehicles[0]) setVehicleId(vehicles[0].id) }, [vehicles])
  useEffect(() => { if (!jobId && jobs[0]) setJobId(jobs[0].id) }, [jobs])

  return (
    <div className="grid gap-4">
      <div className="grid md:grid-cols-3 gap-4">
        <div className="md:col-span-2 card">
          <div className="row border rounded-xl px-3 py-2">
            <Search className="w-5 h-5 text-slate-500" />
            <input className="w-full outline-none" placeholder="Search year/make/model/engine…" value={query} onChange={e=>setQuery(e.target.value)} />
          </div>
          <div className="mt-3 max-h-44 overflow-auto divide-y">
            {filtered.map(v => (
              <button key={v.id} onClick={()=>setVehicleId(v.id)} className={`w-full text-left px-3 py-2 hover:bg-slate-50 ${vehicleId===v.id? 'bg-blue-50/60':''}`}>
                <div className="text-sm font-medium">{v.year} {v.make} {v.model} – {v.engine}</div>
                <div className="text-xs text-slate-500">Tap to select</div>
              </button>
            ))}
          </div>
        </div>

        <div className="card">
          <label className="text-xs uppercase tracking-wide text-slate-500">Job</label>
          <select value={jobId} onChange={(e)=>setJobId(e.target.value)} className="select mt-1">
            {jobs.map(j => <option key={j.id} value={j.id}>{j.title} – {j.category}</option>)}
          </select>
          <div className="row text-slate-600 text-sm mt-3">
            <Settings2 className="w-4 h-4" />
            <span>Demo data. Verify torque/specs in your service manual.</span>
          </div>
        </div>
      </div>

      <div className="card">
        <div className="flex items-center justify-between">
          <div>
            <h2 className="text-xl font-semibold">Tools for selected job</h2>
            <p className="text-slate-600 text-sm">Vehicle + Job specific list</p>
          </div>
          <div className="row text-sm text-slate-600">
            <Hammer className="w-4 h-4" />
            <span>{reqs.length} items</span>
          </div>
        </div>

        <div className="mt-4 grid gap-2">
          {reqs.map((r) => {
            const t = r.tool
            const checked = !!owned[t.id]
            return (
              <div key={r.id} className="flex items-start gap-3 border rounded-xl p-3">
                <input type="checkbox" className="mt-1" checked={checked} onChange={(e)=>setOwned(o=>({ ...o, [t.id]: e.target.checked }))} />
                <div className="flex-1">
                  <div className="font-medium">{t.name}{t.size?` – ${t.size}`:''}{t.drive?` (${t.drive})`:''}</div>
                  {t.notes || r.notes ? <div className="text-sm text-slate-600">{[t.notes, r.notes].filter(Boolean).join(' · ')}</div> : null}
                </div>
                {!checked ? (
                  <button className="inline-flex items-center gap-1 text-blue-700 hover:text-blue-900 text-sm">
                    <ShoppingCart className="w-4 h-4" />
                    <span>Find</span>
                    <ChevronRight className="w-4 h-4" />
                  </button>
                ) : (
                  <div className="row text-emerald-600 text-sm"><CheckCircle2 className="w-4 h-4" /> Owned</div>
                )}
              </div>
            )
          })}
        </div>

        <div className="mt-4 bg-amber-50 border border-amber-200 text-amber-800 rounded-xl p-3 text-sm flex items-start gap-2">
          <svg className="w-4 h-4 mt-0.5" viewBox="0 0 24 24" fill="none"><path d="M12 9v4m0 4h.01M10.29 3.86l-8 14A2 2 0 004 21h16a2 2 0 001.71-3.14l-8-14a2 2 0 00-3.42 0z" stroke="currentColor" strokeWidth="2"/></svg>
          <div>
            <div className="font-medium">Safety & torque disclaimer</div>
            <div>Use jack stands on level surface; torque to manufacturer specs from your service manual. Demo sizes only.</div>
          </div>
        </div>
      </div>

      <div className="card">
        <h3 className="text-lg font-semibold">Missing from your toolbox</h3>
        {missing.length === 0 ? (
          <p className="text-slate-600 text-sm mt-1">You're fully equipped for this job. Nice!</p>
        ) : (
          <ul className="mt-2 list-disc pl-6 text-slate-700">
            {missing.map((r) => (
              <li key={r.id}>{r.tool.name}{r.tool.size?` – ${r.tool.size}`:''}{r.tool.drive?` (${r.tool.drive})`:''}</li>
            ))}
          </ul>
        )}
      </div>
    </div>
  )
}
```

---

## src/app/page.tsx
```tsx
import ToolList from '@/components/ToolList'

export default function Page() {
  return <ToolList />
}
